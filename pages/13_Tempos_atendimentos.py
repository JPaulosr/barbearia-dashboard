import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta

st.set_page_config(page_title="Tempos por Atendimento", page_icon="‚è±Ô∏è", layout="wide")
st.title("‚è±Ô∏è Tempos por Atendimento")

@st.cache_data
def carregar_dados_google_sheets():
    url = "https://docs.google.com/spreadsheets/d/1qtOF1I7Ap4By2388ySThoVlZHbI3rAJv_haEcil0IUE/gviz/tq?tqx=out:csv&sheet=Base%20de%20Dados"
    df = pd.read_csv(url)
    df["Data"] = pd.to_datetime(df["Data"], errors='coerce').dt.date
    df["Hora Chegada"] = pd.to_datetime(df["Hora Chegada"], errors='coerce')
    df["Hora In√≠cio"] = pd.to_datetime(df["Hora In√≠cio"], errors='coerce')
    df["Hora Sa√≠da"] = pd.to_datetime(df["Hora Sa√≠da"], errors='coerce')
    df["Hora Sa√≠da do Sal√£o"] = pd.to_datetime(df["Hora Sa√≠da do Sal√£o"], errors='coerce')
    return df

df = carregar_dados_google_sheets()

colunas_necessarias = ["Hora Chegada", "Hora In√≠cio", "Hora Sa√≠da", "Hora Sa√≠da do Sal√£o", "Cliente", "Funcion√°rio", "Tipo", "Combo", "Data"]
faltando = [col for col in colunas_necessarias if col not in df.columns]
if faltando:
    st.error(f"As colunas obrigat√≥rias est√£o faltando: {', '.join(faltando)}")
    st.stop()

st.markdown(f"<small><i>Registros carregados: {len(df)}</i></small>", unsafe_allow_html=True)

st.markdown("### üéõÔ∏è Filtros")
col_f1, col_f2, col_f3 = st.columns(3)
funcionarios = df["Funcion√°rio"].dropna().unique().tolist()
with col_f1:
    funcionario_selecionado = st.multiselect("Filtrar por Funcion√°rio", funcionarios, default=funcionarios)
with col_f2:
    cliente_busca = st.text_input("Buscar Cliente")
with col_f3:
    hoje = datetime.today().date()
    inicio_default = hoje - timedelta(days=30)
    periodo = st.date_input("Per√≠odo", value=[inicio_default, hoje], help="Selecione o intervalo de datas")

df = df[df["Funcion√°rio"].isin(funcionario_selecionado)]
if cliente_busca:
    df = df[df["Cliente"].str.contains(cliente_busca, case=False, na=False)]
if isinstance(periodo, list) and len(periodo) == 2:
    df = df[(df["Data"] >= periodo[0]) & (df["Data"] <= periodo[1])]

combo_grouped = df.dropna(subset=["Hora In√≠cio", "Hora Sa√≠da", "Cliente", "Data", "Funcion√°rio", "Tipo"]).copy()
combo_grouped = combo_grouped.groupby(["Cliente", "Data"]).agg({
    "Hora Chegada": "min",
    "Hora In√≠cio": "min",
    "Hora Sa√≠da": "max",
    "Hora Sa√≠da do Sal√£o": "max",
    "Funcion√°rio": "first",
    "Tipo": lambda x: ', '.join(sorted(set(x)))
}).reset_index()

combos_df = df.groupby(["Cliente", "Data"])["Combo"].agg(lambda x: ', '.join(sorted(set(str(v) for v in x if pd.notnull(v))))).reset_index()
combo_grouped = pd.merge(combo_grouped, combos_df, on=["Cliente", "Data"], how="left")

combo_grouped["Data"] = pd.to_datetime(combo_grouped["Data"])
combo_grouped["Data Group"] = combo_grouped["Data"]
combo_grouped["Data"] = combo_grouped["Data"].dt.strftime("%d/%m/%Y")

combo_grouped["Hora Chegada"] = combo_grouped["Hora Chegada"].dt.strftime("%H:%M")
combo_grouped["Hora In√≠cio"] = combo_grouped["Hora In√≠cio"].dt.strftime("%H:%M")
combo_grouped["Hora Sa√≠da"] = combo_grouped["Hora Sa√≠da"].dt.strftime("%H:%M")
combo_grouped["Hora Sa√≠da do Sal√£o"] = combo_grouped["Hora Sa√≠da do Sal√£o"].dt.strftime("%H:%M")

def calcular_duracao(row):
    try:
        inicio = pd.to_datetime(row["Hora In√≠cio"], format="%H:%M")
        fim = pd.to_datetime(row["Hora Sa√≠da"], format="%H:%M")
        return (fim - inicio).total_seconds() / 60
    except:
        return None

combo_grouped["Dura√ß√£o (min)"] = combo_grouped.apply(calcular_duracao, axis=1)
combo_grouped["Dura√ß√£o formatada"] = combo_grouped["Dura√ß√£o (min)"].apply(lambda x: f"{int(x // 60)}h {int(x % 60)}min" if pd.notnull(x) else "")
combo_grouped["Espera (min)"] = (pd.to_datetime(combo_grouped["Hora In√≠cio"], format="%H:%M") - pd.to_datetime(combo_grouped["Hora Chegada"], format="%H:%M")).dt.total_seconds() / 60
combo_grouped["Categoria"] = combo_grouped["Combo"].apply(lambda x: "Combo" if "+" in str(x) or "," in str(x) else "Simples")
combo_grouped["Hora In√≠cio dt"] = pd.to_datetime(combo_grouped["Hora In√≠cio"], format="%H:%M", errors='coerce')
combo_grouped["Per√≠odo do Dia"] = combo_grouped["Hora In√≠cio dt"].dt.hour.apply(lambda h: "Manh√£" if 6 <= h < 12 else "Tarde" if 12 <= h < 18 else "Noite")

df_tempo = combo_grouped.dropna(subset=["Dura√ß√£o (min)"]).copy()
df_tempo["Data Group"] = pd.to_datetime(df_tempo["Data"], format="%d/%m/%Y", errors='coerce')

# üî¢ Tempo M√©dio por Funcion√°rio
st.subheader("üë• Tempo M√©dio por Funcion√°rio")
media_funcionario = df_tempo.groupby("Funcion√°rio")["Dura√ß√£o (min)"].mean().reset_index()
media_funcionario["Dura√ß√£o formatada"] = media_funcionario["Dura√ß√£o (min)"].apply(lambda x: f"{int(x // 60)}h {int(x % 60)}min")
fig_func = px.bar(media_funcionario, x="Funcion√°rio", y="Dura√ß√£o (min)", title="Tempo M√©dio por Funcion√°rio", text="Dura√ß√£o formatada")
fig_func.update_traces(textposition='outside')
fig_func.update_layout(margin=dict(t=60), title_x=0.5)
st.plotly_chart(fig_func, use_container_width=True)

# ‚è±Ô∏è Comparativo: Dura√ß√£o vs Espera
st.subheader("‚è±Ô∏è Comparativo: Dura√ß√£o vs Espera")
comparativo = df_tempo.groupby("Cliente")[["Dura√ß√£o (min)", "Espera (min)"]].mean().dropna().reset_index()
fig_comparativo = px.scatter(
    comparativo, x="Espera (min)", y="Dura√ß√£o (min)", text="Cliente",
    title="Comparativo entre Espera e Dura√ß√£o por Cliente",
    labels={"Espera (min)": "Tempo de Espera M√©dio", "Dura√ß√£o (min)": "Dura√ß√£o M√©dia"}
)
fig_comparativo.update_traces(textposition='top center')
fig_comparativo.update_layout(margin=dict(t=60), title_x=0.5)
st.plotly_chart(fig_comparativo, use_container_width=True)

def calcular_ociosidade(df):
    df_ordenado = df.sort_values(by=["Funcion√°rio", "Data Group", "Hora In√≠cio dt"]).copy()
    df_ordenado["Pr√≥ximo In√≠cio"] = df_ordenado.groupby(["Funcion√°rio", "Data Group"])["Hora In√≠cio dt"].shift(-1)
    df_ordenado["Hora Sa√≠da dt"] = pd.to_datetime(df_ordenado["Hora Sa√≠da"], format="%H:%M", errors="coerce")
    df_ordenado["Ociosidade (min)"] = (df_ordenado["Pr√≥ximo In√≠cio"] - df_ordenado["Hora Sa√≠da dt"]).dt.total_seconds() / 60
    df_ordenado["Ociosidade (min)"] = df_ordenado["Ociosidade (min)"].apply(lambda x: x if x is not None and x > 0 else 0)
    return df_ordenado

df_ocioso = calcular_ociosidade(df_tempo)

# üîÑ Comparativo: Tempo Trabalhado vs Ocioso
st.subheader("üìä Tempo Trabalhado x Tempo Ocioso")
tempo_trabalhado = df_ocioso.groupby("Funcion√°rio")["Dura√ß√£o (min)"].sum()
tempo_ocioso = df_ocioso.groupby("Funcion√°rio")["Ociosidade (min)"].sum()

df_comp = pd.DataFrame({
    "Trabalhado (min)": tempo_trabalhado,
    "Ocioso (min)": tempo_ocioso
})
df_comp["Total (min)"] = df_comp["Trabalhado (min)"] + df_comp["Ocioso (min)"]
df_comp["% Ocioso"] = (df_comp["Ocioso (min)"] / df_comp["Total (min)"] * 100).round(1)
df_comp["Trabalhado (h)"] = df_comp["Trabalhado (min)"].apply(lambda x: f"{int(x//60)}h {int(x%60)}min")
df_comp["Ocioso (h)"] = df_comp["Ocioso (min)"].apply(lambda x: f"{int(x//60)}h {int(x%60)}min")

st.dataframe(df_comp[["Trabalhado (h)", "Ocioso (h)", "% Ocioso"]], use_container_width=True)

fig_bar = px.bar(df_comp.reset_index().melt(id_vars="Funcion√°rio", value_vars=["Trabalhado (min)", "Ocioso (min)"]),
                 x="Funcion√°rio", y="value", color="variable", barmode="group", title="Comparativo de Tempo por Funcion√°rio")
fig_bar.update_layout(margin=dict(t=60), title_x=0.5)
st.plotly_chart(fig_bar, use_container_width=True)
