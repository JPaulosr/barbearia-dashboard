import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta

st.set_page_config(page_title="Produtividade por Funcion√°rio", page_icon="üí∞", layout="wide")
st.title("üí∞ Produtividade por Funcion√°rio (R$/hora)")

@st.cache_data
def carregar_dados_google_sheets():
    url = "https://docs.google.com/spreadsheets/d/1qtOF1I7Ap4By2388ySThoVlZHbI3rAJv_haEcil0IUE/gviz/tq?tqx=out:csv&sheet=Base%20de%20Dados"
    df = pd.read_csv(url)
    df.columns = df.columns.str.strip()  # Remove espa√ßos
    st.write("üßæ Colunas da planilha:", df.columns.tolist())
    df["Data"] = pd.to_datetime(df["Data"], errors='coerce').dt.date
    df["Hora Chegada"] = pd.to_datetime(df["Hora Chegada"], errors='coerce')
    df["Hora In√≠cio"] = pd.to_datetime(df["Hora In√≠cio"], errors='coerce')
    df["Hora Sa√≠da"] = pd.to_datetime(df["Hora Sa√≠da"], errors='coerce')
    df["Hora Sa√≠da do Sal√£o"] = pd.to_datetime(df["Hora Sa√≠da do Sal√£o"], errors='coerce')
    df["Valor Total"] = pd.to_numeric(df["Valor"], errors='coerce')  # Verifique se o nome √© exatamente "Valor"
    return df

df = carregar_dados_google_sheets()

st.markdown("### üéõÔ∏è Filtros")
col1, col2 = st.columns(2)
funcionarios = df["Funcion√°rio"].dropna().unique().tolist()
with col1:
    funcionario_selecionado = st.multiselect("Funcion√°rio", funcionarios, default=funcionarios)
with col2:
    hoje = datetime.today().date()
    data_inicial = hoje - timedelta(days=30)
    periodo = st.date_input("Per√≠odo", [data_inicial, hoje])

df = df[df["Funcion√°rio"].isin(funcionario_selecionado)]
if isinstance(periodo, list) and len(periodo) == 2:
    df = df[(df["Data"] >= periodo[0]) & (df["Data"] <= periodo[1])]

df["Hora In√≠cio str"] = df["Hora In√≠cio"].dt.strftime("%H:%M")
df["Hora Sa√≠da str"] = df["Hora Sa√≠da"].dt.strftime("%H:%M")
df["Hora In√≠cio dt"] = pd.to_datetime(df["Hora In√≠cio str"], format="%H:%M", errors='coerce')
df["Hora Sa√≠da dt"] = pd.to_datetime(df["Hora Sa√≠da str"], format="%H:%M", errors='coerce')
df["Dura√ß√£o (min)"] = (df["Hora Sa√≠da dt"] - df["Hora In√≠cio dt"]).dt.total_seconds() / 60
df = df.dropna(subset=["Dura√ß√£o (min)", "Valor Total"])

df = df.sort_values(by=["Funcion√°rio", "Data", "Hora In√≠cio dt"]).copy()
df["Pr√≥ximo In√≠cio"] = df.groupby(["Funcion√°rio", "Data"])["Hora In√≠cio dt"].shift(-1)
df["Ociosidade (min)"] = (df["Pr√≥ximo In√≠cio"] - df["Hora Sa√≠da dt"]).dt.total_seconds() / 60
df["Ociosidade (min)"] = df["Ociosidade (min)"].apply(lambda x: x if x and x > 0 else 0)

df_group = df.groupby("Funcion√°rio").agg({
    "Valor Total": "sum",
    "Dura√ß√£o (min)": "sum",
    "Ociosidade (min)": "sum"
}).reset_index()

df_group["Tempo Total (min)"] = df_group["Dura√ß√£o (min)"] + df_group["Ociosidade (min)"]
df_group["R$/h √∫til"] = (df_group["Valor Total"] / (df_group["Dura√ß√£o (min)"] / 60)).round(2)
df_group["R$/h total"] = (df_group["Valor Total"] / (df_group["Tempo Total (min)"] / 60)).round(2)
df_group["% Ociosidade"] = (df_group["Ociosidade (min)"] / df_group["Tempo Total (min)"] * 100).round(1)

def alerta_produtividade(row):
    if row["R$/h total"] < 30:
        return "‚ö†Ô∏è Baixa Produtividade"
    elif row["% Ociosidade"] > 50:
        return "‚è≥ Muita Ociosidade"
    else:
        return "‚úÖ OK"

df_group["Alerta"] = df_group.apply(alerta_produtividade, axis=1)

st.subheader("üìã Produtividade por Funcion√°rio")
st.dataframe(df_group[["Funcion√°rio", "Valor Total", "R$/h √∫til", "R$/h total", "% Ociosidade", "Alerta"]], use_container_width=True)

fig = px.bar(df_group, x="Funcion√°rio", y=["R$/h √∫til", "R$/h total"], barmode="group",
             title="Comparativo de Receita por Hora (√ötil vs Total)")
fig.update_layout(margin=dict(t=60), title_x=0.5)
st.plotly_chart(fig, use_container_width=True)
