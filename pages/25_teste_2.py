
import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime

st.set_page_config(page_title="Tempos por Atendimento", page_icon="‚è±Ô∏è", layout="wide")
st.title("‚è±Ô∏è Tempos por Atendimento")

@st.cache_data
def carregar_dados_google_sheets():
    url = "https://docs.google.com/spreadsheets/d/1qtOF1I7Ap4By2388ySThoVlZHbI3rAJv_haEcil0IUE/gviz/tq?tqx=out:csv&sheet=Base%20de%20Dados"
    
    # üëá ESSENCIAL! pula a primeira linha com agrupamentos
    df = pd.read_csv(url, skiprows=1)

    df.columns = df.columns.str.strip()

    if "Data" not in df.columns:
        st.error("‚ùå A coluna 'Data' n√£o foi encontrada. Verifique a planilha ou se 'skiprows=1' foi aplicado.")
        st.stop()

    df["Data_convertida"] = pd.to_datetime(df["Data"], errors="coerce")
    df = df[df["Data_convertida"].notna()].copy()
    df["Data"] = df["Data_convertida"].dt.date
    df.drop(columns=["Data_convertida"], inplace=True)

    df["Hora Chegada"] = pd.to_datetime(df["Hora Chegada"], errors='coerce')
    df["Hora In√≠cio"] = pd.to_datetime(df["Hora In√≠cio"], errors='coerce')
    df["Hora Sa√≠da"] = pd.to_datetime(df["Hora Sa√≠da"], errors='coerce')
    df["Hora Sa√≠da do Sal√£o"] = pd.to_datetime(df["Hora Sa√≠da do Sal√£o"], errors='coerce')

    return df

df = carregar_dados_google_sheets()
df = df[df["Funcion√°rio"].notna() & df["Cliente"].notna()]

combo_grouped = df.dropna(subset=["Hora In√≠cio", "Hora Sa√≠da", "Cliente", "Data", "Funcion√°rio", "Tipo"]).copy()
combo_grouped = combo_grouped.groupby(["Cliente", "Data"]).agg({
    "Hora Chegada": "min",
    "Hora In√≠cio": "min",
    "Hora Sa√≠da": "max",
    "Hora Sa√≠da do Sal√£o": "max",
    "Funcion√°rio": "first",
    "Tipo": lambda x: ', '.join(sorted(set(x)))
}).reset_index()

combo_grouped["Dura√ß√£o (min)"] = (combo_grouped["Hora Sa√≠da"] - combo_grouped["Hora In√≠cio"]).dt.total_seconds() / 60
combo_grouped["Espera (min)"] = (combo_grouped["Hora In√≠cio"] - combo_grouped["Hora Chegada"]).dt.total_seconds() / 60
combo_grouped["Hora In√≠cio dt"] = combo_grouped["Hora In√≠cio"]
combo_grouped["Data Group"] = pd.to_datetime(combo_grouped["Data"])

combo_grouped = combo_grouped.dropna(subset=["Hora In√≠cio"])
combo_grouped["Per√≠odo do Dia"] = combo_grouped["Hora In√≠cio"].dt.hour.apply(
    lambda h: "Manh√£" if 6 <= h < 12 else "Tarde" if 12 <= h < 18 else "Noite"
)

df_tempo = combo_grouped.dropna(subset=["Dura√ß√£o (min)"]).copy()

st.subheader("üìÜ Tempo Trabalhado por Funcion√°rio (√öltimos 7 dias)")
hoje = pd.Timestamp.now().normalize()
ultimos_7_dias = hoje - pd.Timedelta(days=6)
df_semana = df_tempo[(df_tempo["Data Group"].dt.date >= ultimos_7_dias.date()) & (df_tempo["Data Group"].dt.date <= hoje.date())]
soma_por_func = df_semana.groupby("Funcion√°rio")["Dura√ß√£o (min)"].sum()
for func, total in soma_por_func.items():
    horas = int(total // 60)
    minutos = int(total % 60)
    st.markdown(f"**{func}** ‚Äì {horas}h {minutos}min")

st.subheader("üí¨ Insights autom√°ticos")
mais_lento = df_semana.nlargest(1, "Dura√ß√£o (min)")
mais_espera = df_semana.nlargest(1, "Espera (min)")
if not mais_lento.empty:
    st.markdown(f"üìå Cliente com atendimento mais demorado: **{mais_lento['Cliente'].values[0]}** ({int(mais_lento['Dura√ß√£o (min)'].values[0])} min)")
if not mais_espera.empty:
    st.markdown(f"‚åõ Cliente que mais esperou: **{mais_espera['Cliente'].values[0]}** ({int(mais_espera['Espera (min)'].values[0])} min)")

st.subheader("üìä Comparativo de Tempo por Funcion√°rio")
graf_comp = df_semana.groupby("Funcion√°rio")[["Dura√ß√£o (min)", "Espera (min)"]].mean().reset_index()
graf_comp["Dura√ß√£o formatada"] = graf_comp["Dura√ß√£o (min)"].apply(
    lambda x: f"{int(x//60)}h {int(x%60)}min" if pd.notnull(x) else "-"
)
fig = px.bar(graf_comp, x="Funcion√°rio", y="Dura√ß√£o (min)", color="Funcion√°rio", text="Dura√ß√£o formatada",
             title="Tempo M√©dio por Funcion√°rio (√öltimos 7 dias)")
fig.update_traces(textposition="outside")
fig.update_layout(title_x=0.5, margin=dict(t=60))
st.plotly_chart(fig, use_container_width=True)
