import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Tempo de Perman√™ncia no Sal√£o", page_icon="üè†", layout="wide")
st.title("üè† Tempo de Perman√™ncia no Sal√£o")

@st.cache_data
def carregar_dados():
    url = "https://docs.google.com/spreadsheets/d/1qtOF1I7Ap4By2388ySThoVlZHbI3rAJv_haEcil0IUE/gviz/tq?tqx=out:csv&sheet=Base%20de%20Dados"
    df = pd.read_csv(url)
    df["Data"] = pd.to_datetime(df["Data"], errors='coerce').dt.strftime("%d/%m/%Y")
    df["Hora Chegada"] = pd.to_datetime(df["Hora Chegada"], errors='coerce')
    df["Hora In√≠cio"] = pd.to_datetime(df["Hora In√≠cio"], errors='coerce')
    df["Hora Sa√≠da"] = pd.to_datetime(df["Hora Sa√≠da"], errors='coerce')
    df["Hora Sa√≠da do Sal√£o"] = pd.to_datetime(df["Hora Sa√≠da do Sal√£o"], errors='coerce')
    return df

df = carregar_dados()
df = df.dropna(subset=["Hora Chegada", "Hora In√≠cio", "Hora Sa√≠da", "Hora Sa√≠da do Sal√£o"])

# C√°lculos de tempo (em minutos)
for col_name, start_col, end_col in [
    ("Tempo Espera (min)", "Hora Chegada", "Hora In√≠cio"),
    ("Tempo Atendimento (min)", "Hora In√≠cio", "Hora Sa√≠da"),
    ("Tempo P√≥s (min)", "Hora Sa√≠da", "Hora Sa√≠da do Sal√£o"),
    ("Tempo Total (min)", "Hora Chegada", "Hora Sa√≠da do Sal√£o")
]:
    df[col_name] = (df[end_col] - df[start_col]).dt.total_seconds() / 60
    df[col_name] = df[col_name].round(0)

# Convers√£o para formato hh h mm min
def formatar_tempo(minutos):
    if pd.isnull(minutos): return ""
    h = int(minutos // 60)
    m = int(minutos % 60)
    if h == 0:
        return f"0h {m}min"
    return f"{h}h {m}min"

for col in ["Tempo Espera (min)", "Tempo Atendimento (min)", "Tempo P√≥s (min)", "Tempo Total (min)"]:
    df[col.replace("(min)", "formatado")] = df[col].apply(formatar_tempo)

st.subheader("üìä Distribui√ß√£o dos Tempos por Cliente")
col1, col2 = st.columns(2)

with col1:
    st.markdown("### Top 10 Perman√™ncias P√≥s-Atendimento")
    top_pos = df.sort_values("Tempo P√≥s (min)", ascending=False).head(10)
    st.dataframe(top_pos[["Data", "Cliente", "Funcion√°rio", "Tempo P√≥s formatado", "Tempo Total formatado"]], use_container_width=True)

with col2:
    st.markdown("### Top 10 Perman√™ncia Total")
    top_total = df.sort_values("Tempo Total (min)", ascending=False).head(10)
    st.dataframe(top_total[["Data", "Cliente", "Funcion√°rio", "Tempo Total formatado"]], use_container_width=True)

st.subheader("üìà Comparativo Visual")
top20 = df.sort_values("Tempo Total (min)", ascending=False).head(20)
fig = px.bar(
    top20,
    x="Cliente",
    y=["Tempo Espera (min)", "Tempo Atendimento (min)", "Tempo P√≥s (min)"],
    title="Top 20 Clientes por Tempo Total (Lado a Lado)",
    barmode="group",
    labels={
        "value": "Minutos",
        "variable": "Etapa",
        "Cliente": "Cliente"
    },
    text_auto=True
)
fig.update_traces(texttemplate='%{text:.0f} min', textposition='outside')
fig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide')
st.plotly_chart(fig, use_container_width=True)

st.subheader("üìã Visualizar base completa")
st.dataframe(
    df[["Data", "Cliente", "Funcion√°rio",
        "Tempo Espera formatado", "Tempo Atendimento formatado",
        "Tempo P√≥s formatado", "Tempo Total formatado"]],
    use_container_width=True
)
