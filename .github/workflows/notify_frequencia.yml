name: notify_frequencia.yml

on:
  workflow_dispatch:
    inputs:
      test_chat_id:
        description: "(opcional) CHAT_ID de TESTE do Telegram (vazio = usa o secret)"
        required: false
        default: ""
  schedule:
    - cron: '0 11 * * *'  # 08:00 BRT

concurrency:
  group: notify-frequencia
  cancel-in-progress: true

jobs:
  morning_send_cards:
    runs-on: ubuntu-latest
    env:
      TZ: America/Sao_Paulo
      SHEET_ID: ${{ secrets.SHEET_ID }}
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHAT_ID: "${{ inputs.test_chat_id || secrets.TELEGRAM_CHAT_ID }}"
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      STATUS_ABA: clientes_status
      ABA_TRANSICOES: freq_transicoes
      SEND_AT_8_CARDS: "true"
      # 👉 Troque para "true" quando a Service Account tiver EDITOR
      ALLOW_WRITE: "false"

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas gspread gspread-dataframe google-auth requests pytz

      - name: Persist SA and export path
        run: |
          test -n "$GCP_SERVICE_ACCOUNT" || (echo "❌ GCP_SERVICE_ACCOUNT ausente" && exit 1)
          echo "$GCP_SERVICE_ACCOUNT" > sa.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/sa.json" >> $GITHUB_ENV

      - name: Dump required envs (masked)
        run: |
          echo "SHEET_ID set? $(test -n "$SHEET_ID" && echo yes || echo no)"
          echo "TELEGRAM_TOKEN set? $(test -n "$TELEGRAM_TOKEN" && echo yes || echo no)"
          echo "TELEGRAM_CHAT_ID (masked): ${TELEGRAM_CHAT_ID:0:3}***"
          python - <<'PY'
          import json, os
          sa = json.loads(os.environ["GCP_SERVICE_ACCOUNT"])
          print("SA client_email:", sa.get("client_email"))
          PY

      - name: Test Google Sheets access
        run: |
          python - <<'PY'
          import os, json, gspread
          from google.oauth2.service_account import Credentials
          scopes = ["https://spreadsheets.google.com/feeds","https://www.googleapis.com/auth/drive"]
          info = json.loads(os.environ["GCP_SERVICE_ACCOUNT"])
          creds = Credentials.from_service_account_info(info, scopes=scopes)
          gc = gspread.authorize(creds)
          sid = os.environ["SHEET_ID"]
          try:
            sh = gc.open_by_key(sid)
          except Exception as e:
            print("open_by_key falhou:", e)
            print("Tentando open_by_url…")
            sh = gc.open_by_url(sid)
          print("Sheet title:", sh.title)
          PY

      - name: Test Telegram (ping)
        if: ${{ env.TELEGRAM_TOKEN != '' && env.TELEGRAM_CHAT_ID != '' }}
        run: |
          python - <<'PY'
          import os, requests
          tok = os.environ["TELEGRAM_TOKEN"].strip()
          chat = os.environ["TELEGRAM_CHAT_ID"].strip()
          r = requests.post(f"https://api.telegram.org/bot{tok}/sendMessage",
                            json={"chat_id": chat, "text": "🔧 ping do notifier (teste)"}, timeout=20)
          print("HTTP:", r.status_code, r.text[:200])
          r.raise_for_status()
          PY

      - name: Run notifier (send cards)
        run: python notify_inline.py
