name: notify_frequencia.yml

on:
  workflow_dispatch:
    inputs:
      test_chat_id:
        description: "(opcional) CHAT_ID de TESTE do Telegram (vazio = usa o secret)"
        required: false
        default: ""
      force_daily:
        description: "ForÃ§ar envio das listas diÃ¡rias (Ãºtil para teste agora)"
        required: false
        default: "false"
  schedule:
    # 08:00 BRT â‰ˆ 11:00 UTC
    - cron: '0 11 * * *'
    # A cada 10 min (transiÃ§Ãµes + feedback)
    - cron: '*/10 * * * *'

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: America/Sao_Paulo

      # --- SECRETS ---
      SHEET_ID: ${{ secrets.SHEET_ID }}
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      # Se foi passado test_chat_id no dispatch, usa ele; senÃ£o, usa o secret
      TELEGRAM_CHAT_ID: ${{ inputs.test_chat_id != '' && inputs.test_chat_id || secrets.TELEGRAM_CHAT_ID }}
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      # --- ABAS / FOTOS ---
      STATUS_ABA: clientes_status
      # FOTO_COL: link_foto

      # --- FLAGS DE ENVIO ---
      # Verdadeiro se for o agendado 11:00 UTC OU se o usuÃ¡rio marcou force_daily=true no dispatch
      SEND_DAILY_HEADER: ${{ (github.event_name == 'schedule' && github.event.schedule == '0 11 * * *') || (github.event_name == 'workflow_dispatch' && inputs.force_daily == 'true') }}
      SEND_LIST_POUCO:  ${{ (github.event_name == 'schedule' && github.event.schedule == '0 11 * * *') || (github.event_name == 'workflow_dispatch' && inputs.force_daily == 'true') }}
      SEND_LIST_MUITO:  ${{ (github.event_name == 'schedule' && github.event.schedule == '0 11 * * *') || (github.event_name == 'workflow_dispatch' && inputs.force_daily == 'true') }}

      # Feedbacks (ficam ativos nos dois gatilhos; ajuste se quiser)
      SEND_FEEDBACK_ONLY_IF_WAS_LATE: "true"
      SEND_FEEDBACK_ON_NEW_VISIT_ALL: "false"
      SEND_TRANSITION_BACK_TO_EM_DIA: "false"

      # Logs Python mais verbosos
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          pip install \
            pandas==2.* \
            gspread==6.* \
            gspread-dataframe==3.* \
            google-auth==2.* \
            requests==2.* \
            pytz==2024.*

      - name: Write service account to file (heredoc safe)
        run: |
          set -euxo pipefail
          cat > sa.json <<'JSON'
          ${{ secrets.GCP_SERVICE_ACCOUNT }}
          JSON
          echo "GOOGLE_APPLICATION_CREDENTIALS=$PWD/sa.json" >> $GITHUB_ENV

      - name: Sanity check service account JSON
        run: |
          python - <<'PY'
          import json, sys
          try:
              j = json.load(open('sa.json','r'))
              print('Service account OK. project_id=', j.get('project_id'), ' client_email=', j.get('client_email'))
          except Exception as e:
              print('JSON invÃ¡lido do service account:', e, file=sys.stderr)
              sys.exit(1)
          PY

      - name: Echo schedule flags (debug)
        run: |
          echo "event_name=${{ github.event_name }}"
          echo "event_schedule=${{ github.event.schedule }}"
          echo "SEND_DAILY_HEADER=$SEND_DAILY_HEADER"
          echo "SEND_LIST_POUCO=$SEND_LIST_POUCO"
          echo "SEND_LIST_MUITO=$SEND_LIST_MUITO"
          echo "STATUS_ABA=$STATUS_ABA"
          echo "TELEGRAM_CHAT_ID=$TELEGRAM_CHAT_ID"
          python -V

      # ===== DEBUG: PING TELEGRAM (para validar CHAT_ID/TOKEN) =====
      - name: Telegram ping (debug)
        run: |
          python - <<'PY'
          import os, requests, sys
          token = os.environ.get('TELEGRAM_TOKEN')
          chat_id = os.environ.get('TELEGRAM_CHAT_ID')
          if not token or not chat_id:
              print("Token/ChatID ausentes", file=sys.stderr); sys.exit(1)
          r = requests.get(f"https://api.telegram.org/bot{token}/sendMessage",
                           params={"chat_id": chat_id, "text": "ðŸ”§ Ping do notifier (teste de conexÃ£o)."})
          print("Ping status:", r.status_code, r.text)
          if r.status_code != 200:
              sys.exit(2)
          PY

      - name: Run notifier
        run: |
          set -euxo pipefail
          python -u notify_inline.py
