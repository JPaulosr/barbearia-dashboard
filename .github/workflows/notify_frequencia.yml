name: notify_frequencia.yml

on:
  # ⏰ roda todo dia às 08:00 BRT (11:00 UTC)
  schedule:
    - cron: '0 11 * * *'
  # ▶️ habilita "Run workflow" manual com flags
  workflow_dispatch:
    inputs:
      force_daily:
        description: "Forçar envio das listas agora (cabeçalho + Pouco/Muito)"
        required: false
        default: "true"
      test_chat_id:
        description: "(opcional) CHAT_ID de teste; vazio = usa o secret"
        required: false
        default: ""

concurrency:
  group: notify-frequencia
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: America/Sao_Paulo

      # --- SECRETS ---
      SHEET_ID: ${{ secrets.SHEET_ID }}
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ inputs.test_chat_id != '' && inputs.test_chat_id || secrets.TELEGRAM_CHAT_ID }}
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      # --- ABAS / FOTOS ---
      BASE_ABA: "Base de Dados"
      ABA_STATUS_CACHE: "status_cache"
      STATUS_ABA: "clientes_status"
      # FOTO_COL: link_foto

      # --- Flags p/ execução diária às 08h ---
      SEND_DAILY_HEADER: ${{ (github.event_name == 'schedule' && github.event.schedule == '0 11 * * *') || (github.event_name == 'workflow_dispatch' && inputs.force_daily == 'true') }}
      SEND_LIST_POUCO:  ${{ (github.event_name == 'schedule' && github.event.schedule == '0 11 * * *') || (github.event_name == 'workflow_dispatch' && inputs.force_daily == 'true') }}
      SEND_LIST_MUITO:  ${{ (github.event_name == 'schedule' && github.event.schedule == '0 11 * * *') || (github.event_name == 'workflow_dispatch' && inputs.force_daily == 'true') }}

      # Feedbacks (cards de retorno)
      SEND_FEEDBACK_ON_NEW_VISIT_ALL: "true"
      SEND_FEEDBACK_ONLY_IF_WAS_LATE: "false"
      SEND_TRANSITION_BACK_TO_EM_DIA: "true"

      # Força no script também (fallback)
      FORCE_DAILY: ${{ github.event_name == 'workflow_dispatch' && inputs.force_daily == 'true' }}

      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          pip install \
            pandas==2.* \
            gspread==6.* \
            gspread-dataframe==3.* \
            google-auth==2.* \
            requests==2.* \
            pytz==2024.*

      - name: Write service account to file (heredoc safe)
        run: |
          set -euxo pipefail
          cat > sa.json <<'JSON'
          ${{ secrets.GCP_SERVICE_ACCOUNT }}
          JSON
          echo "GOOGLE_APPLICATION_CREDENTIALS=$PWD/sa.json" >> $GITHUB_ENV

      - name: Sanity check service account JSON
        run: |
          python - <<'PY'
          import json, sys
          try:
              j = json.load(open('sa.json','r'))
              print('Service account OK. project_id=', j.get('project_id'), ' client_email=', j.get('client_email'))
          except Exception as e:
              print('JSON inválido do service account:', e, file=sys.stderr)
              sys.exit(1)
          PY

      - name: Echo flags (debug)
        run: |
          echo "event_name=${{ github.event_name }}"
          echo "event_schedule=${{ github.event.schedule }}"
          echo "SEND_DAILY_HEADER=$SEND_DAILY_HEADER"
          echo "SEND_LIST_POUCO=$SEND_LIST_POUCO"
          echo "SEND_LIST_MUITO=$SEND_LIST_MUITO"
          echo "SEND_TRANSITION_BACK_TO_EM_DIA=$SEND_TRANSITION_BACK_TO_EM_DIA"
          echo "FORCE_DAILY=$FORCE_DAILY"
          echo "STATUS_ABA=$STATUS_ABA"
          echo "TELEGRAM_CHAT_ID=$TELEGRAM_CHAT_ID"
          python -V

      - name: Run notifier
        run: |
          set -euxo pipefail
          python -u notify_inline.py
