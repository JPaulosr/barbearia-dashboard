name: notify_frequencia.yml

on:
  workflow_dispatch:
    inputs:
      test_chat_id:
        description: "(opcional) CHAT_ID de TESTE do Telegram (vazio = usa o secrets)"
        required: false
        default: ""
  schedule:
    - cron: '0 11 * * *'  # 08:00 BRT

concurrency:
  group: notify-frequencia
  cancel-in-progress: true

jobs:
  morning_send_cards:
    runs-on: ubuntu-latest
    env:
      TZ: America/Sao_Paulo
      SHEET_ID: ${{ secrets.SHEET_ID }}
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ inputs.test_chat_id != '' && inputs.test_chat_id || secrets.TELEGRAM_CHAT_ID }}
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      STATUS_ABA: clientes_status
      ABA_TRANSICOES: freq_transicoes
      SEND_AT_8_CARDS: "true"   # envia cards

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas gspread gspread-dataframe google-auth requests pytz

      - name: Write SA file and export path
        run: |
          echo "$GCP_SERVICE_ACCOUNT" > sa.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/sa.json" >> $GITHUB_ENV

      # ===== DIAGNÃ“STICO 1: SA email =====
      - name: Show Service Account email
        run: |
          python - <<'PY'
          import json, os
          sa = json.loads(os.environ["GCP_SERVICE_ACCOUNT"])
          print("SA client_email:", sa.get("client_email"))
          PY

      # ===== DIAGNÃ“STICO 2: Acesso ao Sheets =====
      - name: Test Google Sheets access
        run: |
          python - <<'PY'
          import os, json, gspread
          from google.oauth2.service_account import Credentials
          scopes = ["https://spreadsheets.google.com/feeds","https://www.googleapis.com/auth/drive"]
          info = json.loads(os.environ["GCP_SERVICE_ACCOUNT"])
          creds = Credentials.from_service_account_info(info, scopes=scopes)
          gc = gspread.authorize(creds)
          sh = gc.open_by_key(os.environ["SHEET_ID"])
          print("Sheet title:", sh.title)
          print("Worksheets:", [w.title for w in sh.worksheets()])
          PY

      # ===== DIAGNÃ“STICO 3: Teste Telegram (opcional) =====
      - name: Test Telegram (ping)
        run: |
          python - <<'PY'
          import os, requests
          tok = os.environ["TELEGRAM_TOKEN"].strip()
          chat = os.environ["TELEGRAM_CHAT_ID"].strip()
          url = f"https://api.telegram.org/bot{tok}/sendMessage"
          r = requests.post(url, json={"chat_id": chat, "text": "ðŸ”§ ping do notifier (teste de conexÃ£o)"}, timeout=20)
          print("HTTP:", r.status_code, r.text[:180])
          r.raise_for_status()
          PY

      # ===== EXECUÃ‡ÃƒO REAL =====
      - name: Run notifier (send cards)
        run: python notify_inline.py
